version: '3.1'

services:

  dotnet-app:
    build:
      context: ./.docker/dotnet-deploy
      args: # Pass build-time arguments
        SSH_USER: ${SSH_USER}
        SSH_PASSWORD: ${SSH_PASSWORD}
    container_name: dotnet-app
    ports:
      - "2222:22" # Map SSH port for remote access to the container
      - "5008:5000" # Map HTTP port (host:container) for .NET app access
    volumes:
      - ./containers/dotnet-app:/home/${SSH_PASSWORD}/app # Mount the deployment folder to the app directory in the container
    environment: # Pass runtime environment variables
      - DOTNET_RUNNING_IN_CONTAINER=true # Indicates that the .NET app is running inside a container
      - DOTNET_USE_POLLING_FILE_WATCHER=true # Ensures that file changes are detected properly in mounted volumes
      - ASPNETCORE_URLS=http://0.0.0.0:5000 # Configures the .NET app to listen on all network interfaces (IPv4) on port 5000
      - SSH_USER=${SSH_USER} # Pass SSH_USER for runtime use (if needed)
      - SSH_PASSWORD=${SSH_PASSWORD} # Pass SSH_PASSWORD for runtime use (if needed)
    networks:
      - app

  php-app:
    build: .docker/php
    container_name: php-app
    ports: 
      - "8009:80"
    volumes: 
      - ./containers/php-app:/var/www/html
    networks:
      - app 

  nginx:
    build:
      context: ./.docker/nginx
    container_name: nginx
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:  
      - ./containers/client/apps:/home/ubuntu/apps 

  node:
    build: .docker/node
    container_name: node
    ports:
      - "3000:3000" 
    volumes:
      - .:/app 
    stdin_open: true 
    tty: true         
    networks:
    - app  
    
  mongo:
    image: mongo:5.0
    container_name: mongo
    environment:
        - MONGO_INITDB_ROOT_USERNAME=root
        - MONGO_INITDB_ROOT_PASSWORD=password
        - MONGO_INITDB_ROOT_DATABASE=lara_mongo
    restart: unless-stopped
    ports:
      - "27019:27017"
    volumes:
      - ./.docker/mgdata/db:/data/db
      - ./.docker/mgdata/dev.archive:/Databases/dev.archive
      - ./.docker/mgdata/production:/Databases/production
    networks:
    - app  

  mssql:
    build: .docker/sqlserver
    container_name: sqlserver
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=yourStrong123Password
    restart: unless-stopped
    ports:
      - "1434:1433"
    volumes:
      - ./.docker/sqldata/data:/var/opt/mssql/data
    networks:
      - app

  mongo-express:
    image: mongo-express
    container_name: mexpress
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_URL=mongodb://root:password@mongo:27017/?authSource=admin
      - ME_CONFIG_BASICAUTH_USERNAME=mexpress
      - ME_CONFIG_BASICAUTH_PASSWORD=mexpress
    links:
      - mongo
    restart: unless-stopped
    ports:
      - "8091:8081"  
    networks:
    - app  

  mydb:
    build: .docker/mysql
    container_name: mydb
    command: --explicit_defaults_for_timestamp=1
    restart: always
    volumes:
      - "./.docker/mydata:/var/lib/mysql"
    environment: 
      MYSQL_ROOT_PASSWORD: A_1234567
      MYSQL_DATABASE: laravel
    ports: 
      - "3309:3306"
    networks:
      - app      

  phpmyadmin: 
    image: phpmyadmin
    container_name: myadmin
    restart: always
    environment:
      - PMA_HOST=mydb    
    ports:
      - 8089:80
    networks:
      - app    

  pgdb:
    image: postgres
    container_name: pgdb
    environment:
    - POSTGRES_USER=admin
    - POSTGRES_PASSWORD=postgres   
    - POSTGRES_DB=postgres  
    ports:
    - "5439:5432"
    volumes:
    - ./.docker/pgdata:/var/lib/postgresql/data 
    networks:
    - app      

  pgadm:
    image: dpage/pgadmin4
    container_name: pgadm
    restart: always
    environment:
    - PGADMIN_DEFAULT_EMAIL=admin@admin.com
    - PGADMIN_DEFAULT_PASSWORD=postgres
    volumes:
      - ./.docker/pgadmin:/var/lib/pgadmin
    ports:
    - "5059:80"
    networks:
    - app    

networks:
  app:
    driver: bridge